/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}

html {
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  line-height: 1.7;
  color: #777;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgb(126, 213, 111, 0.8),
      rgba(40, 180, 133, 0.8)
    ),
    url("../img/hero.jpg");
  background-size: cover;
  background-position: top;
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative;
}

.logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.logo {
  height: 3.5rem;
}

.logo:hover {
  animation: moveInRight 20s ease-out;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
}

.heading-primary {
  color: white;
  text-transform: uppercase;
  font-weight: 400;
  backface-visibility: hidden;
  margin-bottom: 6rem;
}

.heading-primary-main {
  font-size: 6rem;
  display: block;
  letter-spacing: 3.5rem;
  animation-name: moveInLeft;
  animation-duration: 2s;
  animation-timing-function: ease-out;
}

.heading-primary-sub {
  display: block;
  animation: moveInRight 2s ease-out;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
}

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  50% {
    transform: translateX(2rem);
  }

  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  50% {
    transform: translateX(-2rem);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

/* stating that the link color or class before visiting and after it are the same. */
.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  font-size: 1.6rem;
  border-radius: 10rem;

  /* checking that all btn or link properties to be affected by the transitions */
  transition: all 0.2s;
  position: relative;
}

.btn-white {
  background-color: white;
  color: #777;
}

.btn:hover {
  transform: translateY(-0.3rem);
  /* shadow in x  ,  y + blur effect  */
  box-shadow: 0 0.5rem 1rem rgb(0, 0, 0, 0.2);
}

/* the button is being clicked on */
.btn:active {
  transform: translateY(-0.1rem);
}

/* a child button rendered after the content of the main button */
.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn-white::after {
  background-color: white;
}
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

@keyframes moveInButton {
  0% {
    opacity: 0;
    transform: translateY(10rem);
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn-animated {
  animation: moveInButton 0.5s ease-out 0.75s;
  /* it's useful with 0% step -- where it sets the 0% step properties in the button itself */
  animation-fill-mode: backwards;
}
